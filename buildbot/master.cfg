# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

# XXX: stuff we fixed by hand in the buildbot source:
#      - http://trac.buildbot.net/ticket/3107

# import the stuff we're using
from buildbot.buildslave import BuildSlave
from buildbot.schedulers import basic, triggerable
from buildbot.schedulers.forcesched import *
from buildbot.changes import filter
from buildbot.process.properties import Interpolate, renderer
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile
from buildbot.steps.transfer import DirectoryUpload
from buildbot.steps.master import MasterShellCommand
from buildbot.steps import trigger
from buildbot.status import html
from buildbot.status import words
from buildbot.status.web import authz, auth

import json
from pprint import pprint

# general configuration
c['protocols'] = {'pb': {'port': 9988}}
c['db'] = {'db_url': "sqlite:///state.sqlite"}
c['buildbotURL'] = "https://buildbot.meshwith.me/openwrt/"
c['title'] = "Meshbox"
c['titleURL'] = "https://github.com/seattlemeshnet/meshbox"
c['schedulers'] = []
c['builders'] = []
c['status'] = []

# build configuration
secrets = {
    'repo': 'https://github.com/seattlemeshnet/meshbox.git',

    'httpPort': 8011,

    # meshbox branch -> repo for openwrt branch
    'branches': {
        'master': 'git://git.openwrt.org/openwrt.git',
        #'for-14.07': 'git://git.openwrt.org/14.07/openwrt.git'
    },

    # public directory on the master
    'artifactsDir': Interpolate('/var/www/buildbot/snapshots/%(prop:buildername)s-%(prop:branch)s/%(prop:buildnumber)s'),

    'opkgDir': Interpolate('/var/www/buildbot/snapshots/%(prop:buildername)s-%(prop:branch)s/latest'),

    # URL to that public directory
    'artifactsURL': Interpolate('/snapshots/%(prop:buildername)s-%(prop:branch)s/%(prop:buildnumber)s'),

    # irc bot
    'ircServer': 'fcf2:ff45:a10:2ca1:fb5c:426d:3505:4f18',
    'ircPort': 6667,
    'ircNickname': 'buildbot',
    'ircChannel': '#openwrt'
}

# read and merge the passwords and slaves
secrets_data = open("secrets.json")
secrets.update(json.load(secrets_data))
secrets_data.close()
pprint(secrets)

# map builder -> slave -- when creating a builder, we need to assign
# it a list of slaves which will run its build
builders = {}
for slaveName in secrets['slaves'].keys():
    for builderName in secrets['slaves'][slaveName]['builders']:
        builderName = builderName.encode('us-ascii', 'replace')
        if builderName in builders.keys():
            builders[builderName].append(slaveName)
        else:
            builders[builderName] = [slaveName]

# utility functions for conversion from unicode strings (emitted by json.load)
# to normal strings accepted by few buildbot classes.
def slaveFromSecret(name):
    return BuildSlave(name, secrets['slaves'][name]['password'], max_builds=1)
def userFromSecret(name):
    return (name.encode('us-ascii', 'replace'),
            secrets['users'][name].encode('us-ascii', 'replace'))

# the build slaves
c['slaves'] = map(slaveFromSecret, secrets['slaves'])

# the automatic scheduler is fed by the github change hook (see bottom of file)
artifactsBuilders = [x for x in builders.keys() if x != 'smoketest']
c['schedulers'].append(
    basic.SingleBranchScheduler(
        name='smoketest',
        change_filter=filter.ChangeFilter(branch=secrets['branches'].keys()),
        treeStableTimer=60,
        builderNames=['smoketest']))
c['schedulers'].append(
    triggerable.Triggerable(name='artifacts', builderNames=artifactsBuilders))

# force scheduler which can be triggered from the UI.
# the trigger form has a branch field.
c['schedulers'].append(
    ForceScheduler(name='force',
                   builderNames=builders.keys(),
                   branch=ChoiceStringParameter(name='branch',
                                                choices=secrets['branches'].keys(),
                                                default=secrets['branches'].keys()[0]),
                   revision=FixedParameter(name='revision', default=''),
                   repository=FixedParameter(name='repository', default=''),
                   project=FixedParameter(name='project', default=''),
                   reason=FixedParameter(name='reason', default=''),
                   properties=[]))

# return the appropriate OpenWrt repo URL
@renderer
def openwrtRepo(props):
    return secrets['branches'][props['branch']]

# return the number of compile jobs to be run on the specific slave
@renderer
def numberOfJobs(props):
    return secrets['slaves'][props['slavename']]['jobs']

# clone the code
def gitStep():
    return Git(repourl=secrets['repo'])

# clone the appropriate openwrt release
def freshOpenwrtStep(workdir):
    return ShellCommand(name='openwrt', command=Interpolate('''
        rm -rvf ../%(kw:workdir)s ; git clone --progress %(kw:repo)s ../%(kw:workdir)s
    ''', repo=openwrtRepo, workdir=workdir))

# clone the appropriate openwrt release, or update and reuse an existing clone
def cachedOpenwrtStep(workdir):
    return ShellCommand(name='openwrt', command=Interpolate('''
        if [ -d ../%(kw:workdir)s ]
        then cd ../%(kw:workdir)s &&
            rm -rvf bin/ dl/*cjdns* build_dir/target-*/*cjdns* &&
            git fetch --progress &&
            git checkout origin/master
        else git clone --progress %(kw:repo)s ../%(kw:workdir)s
        fi
    ''', repo=openwrtRepo, workdir=workdir))

# set up the feeds
#
# TODO: still succeeds if scripts/feeds fails
def setupStep(workdir):
    return ShellCommand(name='feeds', command=Interpolate('''
        cp -v feeds.conf.default feeds.conf &&
        echo 'src-git meshbox %(kw:repo)s^%(prop:got_revision)s' >> feeds.conf &&
        ./scripts/feeds update -a && ./scripts/feeds install luci-app-cjdns luci
    ''', repo=secrets['repo']), workdir=workdir)

# configure the target and libraries
def configureStep(workdir):
    return Configure(command=Interpolate('''
        cp -v feeds/meshbox/buildbot/%(prop:buildername)s.config .config &&
        echo CONFIG_KERNEL_SECCOMP=y >> .config &&
        echo CONFIG_PACKAGE_luci-app-cjdns=y >> .config &&
        echo CONFIG_PACKAGE_luci=y >> .config &&
        make defconfig &&
        ./scripts/diffconfig.sh
    '''), workdir=workdir)

# compile the images and packages
def compileStep(workdir):
    make = Interpolate('make -j %(kw:jobs)s V=s', jobs=numberOfJobs)
    return Compile(command=make, timeout=7200, workdir=workdir)

def smoketestStep(workdir):
    return ShellCommand(name='smoketest', command='feeds/meshbox/docker/smoketest.sh', workdir=workdir)

def triggerStep():
    return trigger.Trigger(schedulerNames=['artifacts'],
                           updateSourceStamp=True,
                           waitForFinish=False)

def uploadStep(workdir):
    src = Interpolate('bin/%(prop:buildername)s/')
    return DirectoryUpload(slavesrc=src,
                           masterdest=secrets['artifactsDir'],
                           url=secrets['artifactsURL'],
                           workdir=workdir)

# smoketest, similar to the x86, but runs smoketest.sh instead of uploading artifacts.
def smoketestBuilder(slaveNames):
    factory = BuildFactory()
    workdir = Interpolate('build/openwrt-%(prop:branch)s/')

    factory.addStep(gitStep())
    factory.addStep(cachedOpenwrtStep(workdir))
    factory.addStep(setupStep(workdir))
    factory.addStep(configureStep(workdir))
    factory.addStep(compileStep(workdir))
    factory.addStep(smoketestStep(workdir))
    factory.addStep(triggerStep())

    return BuilderConfig(name='smoketest', slavenames=slaveNames, factory=factory)

def publishStep():
    return MasterShellCommand(command=Interpolate('''
        unlink %(kw:latest)s ; ln -s %(kw:artifacts)s %(kw:latest)s
    ''', artifacts=secrets['artifactsDir'], latest=secrets['opkgDir']))

# target-specific artifact builds, i.e. images and packages
def artifactsBuilder(slaveNames, builderName):
    factory = BuildFactory()
    workdir = Interpolate('build/openwrt-%(prop:branch)s/')

    factory.addStep(gitStep())
    factory.addStep(freshOpenwrtStep(workdir))
    factory.addStep(setupStep(workdir))
    factory.addStep(configureStep(workdir))
    factory.addStep(compileStep(workdir))
    factory.addStep(uploadStep(workdir))
    factory.addStep(publishStep())

    return BuilderConfig(name=builderName, slavenames=slaveNames, factory=factory)

# for every builder defined in secrets.json, we add a build configuration.
# the smoketest builder has its own code path.
for builderName in builders.keys():
    slaveNames = builders[builderName]
    if builderName == 'smoketest':
        c['builders'].append(smoketestBuilder(slaveNames))
    else:
        c['builders'].append(artifactsBuilder(slaveNames, builderName))

# the web UI
users = map(userFromSecret, secrets['users'])
c['status'].append(html.WebStatus(
    http_port=secrets['httpPort'],
    authz=authz.Authz(
        auth=auth.BasicAuth(users),
        cleanShutdown='auth',
        gracefulShutdown='auth',
        forceBuild='auth',
        forceAllBuilds='auth',
        pingBuilder='auth',
        stopBuild='auth',
        stopAllBuilds='auth',
        cancelPendingBuild='auth',
        cancelAllPendingBuilds='auth'),
    change_hook_dialects={ 'github' : True },
    # TODO: should use secrets.json
    change_hook_auth=['file:changehook.passwd']
))

# the IRC bot
c['status'].append(words.IRC(secrets['ircServer'], secrets['ircNickname'],
    channels=[{"channel": secrets['ircChannel']}],
    port=secrets['ircPort'],
    notify_events={
      'exception': 1,
      'failure': 1,
      'failureToSuccess': 1,
      'success': 1,
      'successToFailure': 1,
    }))
